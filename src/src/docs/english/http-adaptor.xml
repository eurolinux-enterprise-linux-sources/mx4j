<section>
   <title>HttpAdaptor</title>
   <section>
      <title>Introduction</title>
      <para>
			The HttpAdaptor offers a basic way to interface with an MX4J agent. It contains a simple HTTP 1.0 server,
			able to translate HTTP requests to JMX requests. Obviously it has some limitations, like not being able to
			manipulate data which cannot be obtained from Strings. As an advantage HTTP traffic is usually enabled through firewalls
			and you can use your browser as a client.
      </para>
      <para>
			The MX4J HttpAdaptor is built basically to serve XML data. Requests are made with normal http requests and they are
			answered by constructing a XML tree containing the requested data. The request may also have variables which
			may specify exactly the requested data. The XML tree can be later processed by defining a ProcessorMBean, which has the task to
			take the XML tree and do something with it. The processor will also be responsible to serve requests not understood by
			the server. In this way an appropriate processor can serve images and raw html. Currently there are two Processors defined:
         <itemizedlist mark="opencircle">
            <listitem>
               <para>
                  <emphasis>DefaultProcessorMBean:</emphasis> It does not modify the XML tree limiting itself to publish the tree as text. Defining
						the content-type as text/xml. This usually means that your browser will display the XML text. This processor won't server
						any data besides the XML files.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>XSLTProcessorMBean:</emphasis> This processor takes the XML tree and transforms it to HTML by means of XSLT. This requires that
						you use some JAXP-compliant XSLT. It has been tested mainly with
                  <ulink url="http://xml.apache.org/xalan-j">Xalan XSLT processor</ulink>.
						The processor is also able to serve images and other files.
               </para>
            </listitem>
         </itemizedlist>

      </para>
      <para>
			As the processor is an MBean it means you can deploy and modify it on runtime. The HttpAdaptorMBean defines three methods to set the Processor.
			If no processor is defined or an error is found, the DefaultProcessor will be used.
      </para>
   </section>
   <section>
      <title>Parameters and operations</title>
      <para>
			The HttpAdaptor is an MBean defined by the interface HttpAdaptorMBean. It contains the following parameters.
         <itemizedlist mark="opencircle">
            <listitem>
               <para>
                  <emphasis>Port:</emphasis> Defines the port in which the server will be listening to. By default is 8080.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>Host:</emphasis> Defines the host name in which the server will be listening to. By default is localhost. This means that
						you can't access the server from another computer. This is good for security reasons, forcing you to explicitly open the server to the outside.
						You can also use 0.0.0.0 which will open the server to all local interfaces
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>Alive:</emphasis> Boolean property which tells whether the server is running or not.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>AuthenticationMethod:</emphasis> Sets the authentication method. Valid values are none, basic, digest. Please refer to the security chapter
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>Processor:</emphasis> This sets the processor object to be used after the XML tree construction. If used the ProcessorName is set to null.
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>ProcessorName:</emphasis> This sets the MBean's ObjectName to be used as XML processor. If used then Processor is set to null. The MBean has to implement the
                  <classname>mx4j.tools.adaptor.http.ProcessorMBean</classname> interface
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>ProcessorNameString:</emphasis> The same as before but the object name is passed as a string
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>ProcessorClass:</emphasis> This will take a class name as string and instantiate a class object. The class has to implement the
                  <classname>mx4j.tools.adaptor.http.ProcessorMBean</classname> interface, and you have to set the ProcessorName or ProcessorNameString property
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>SocketFactory:</emphasis> Replaces the default socket factory with another, for example, the mx4j.tools.adaptor.http.ssl.SSLFactory
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>SocketFactoryName:</emphasis> Replaces the default socket factory with another using an ObjectName, the pointed mbean has to have an
                  <emphasis>public ServerSocket createServerSocket(int port, int backlog, String host) throws IOException</emphasis> method
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>SocketFactoryNameString:</emphasis> Same as previous but it takes a String object
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>StartDate:</emphasis> Date and Time when the Adaptor was started
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>RequestsCount:</emphasis> Total amount of requests served
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>Version:</emphasis> HttpAdaptor's version
               </para>
            </listitem>
         </itemizedlist>
      </para>
      <para>
			The HttpAdaptor accept the following operations
         <itemizedlist mark="opencircle">
            <listitem>
               <para>
                  <emphasis>start()</emphasis>: Starts the HttpAdaptor, notice that the server does not start by itself
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>stop()</emphasis>: Stops the server
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>addCommandProcessor(String path,HttpCommandProcessor processor)</emphasis>: It adds a command processor and assigns it to the path.
						You can use this to create your own command processors which generate a customized XML tree. Notice that
						if the path was assigned before this command will replace the previous definition
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>addCommandProcessor(String path,String classname)</emphasis>: Same as previous but the processor object is
						indicated with a classname, the operation will try to instantiate an object of the given class, check that implements
						the
                  <classname>mx4j.tools.adaptor.http.HttpCommandProcessor</classname> interface, and assign it to the indicated path
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>void removeCommandProcessor(String path)</emphasis>: Removes a command processor assigned to the give path
               </para>
            </listitem>
         </itemizedlist>
      </para>
   </section>
   <section>
      <title>Security</title>
      <para>
			The HttpAdaptor is in no way guaranteed to be secure. However basic authentication and SSL support are available.
      </para>
      <section>
         <title>Basic Authentication</title>
         <para>
			The Basic Authentication method provides a weak form of protection. When it is set your browser should prompt you for a username
			and password which are compared with the ones stored in the Adaptor. To add a username/password pair use the
            <emphasis>addAuthorization</emphasis> method.
			As mentioned before the basic authentication is weak since your username and password are sent with a weak encoding (Base64). However it can
			be prefectly used in secured networks or via enabling SSL.
         </para>
      </section>
      <section>
         <title>SSL support</title>
         <para>
			The HttpAdaptor can use SSL instead of normal sockets. For that is necessary three steps:
            <itemizedlist>
               <listitem>
                  <para>Install JSSE:</para> JSSE is necessary to run the Adaptor with SSL support. It is possible to use either JSSE version 1.0.2 available
                  <ulink url="http://java.sun.com/products/jsse/index-102.html">here</ulink>,
						or JDK 1.4. JSSE comes with 3 jar files which should be added to your classpath: jsse.jar, jcert.jar and jnet.jar. Another alternative
						is to put those files at your JAVA_HOME/lib/ext dir. In case you are using JDK 1.4 you don't need to do this
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>Create server certificate:</para>
                  <para>Use the keytool command to create a server certificate. For example</para>
                  <para>
                     <emphasis>keytool -genkey -keystore certs -keyalg RSA</emphasis>
                  </para>
                  <para>where certs is the keystore file name.
					You will be prompted for a password for the keystore and the certificate distinguished name.
					Notice that your browser will probably
					complain about the vailidty of the key since it was signed by yourself.</para>
                  <strong>Note that if the key generation algorithm is not RSA but something else your browser may not accept it</strong>
               </listitem>
            </itemizedlist>
            <itemizedlist>
               <listitem>
                  <para>Configure HttpAdaptor:</para> Finally you should change the default socket factory for a SSL factory. To do that
					you should use the SocketFactory attribute passing a
                  <classname>mx4j.tools.adaptor.http.ssl.SSLFactory</classname> object. The SSLFactory object should be previoulsy configured with
					your keystore and key.
               </listitem>
            </itemizedlist>
         </para>
         <para>
			After this you can start the HttpAdaptor as usual and point to https://host:port instead of http://host:port
         </para>
      </section>
      <section>
         <title>SSLFactory</title>
         <para>The SSLFactory contains several parameters you need to configure to find the certificate keystore. They are in the SSLFactory Management interface</para>
         <itemizedlist>
            <listitem>
               <emphasis>KeyStoreType:</emphasis> Sets the keystore type. If you used the keytool command this is JKS
            </listitem>
            <listitem>
               <emphasis>KeyStoreFileName:</emphasis> Filename of the certificate file
            </listitem>
            <listitem>
               <emphasis>KeyStorePassword:</emphasis> Keystore password
            </listitem>
            <listitem>
               <emphasis>KeyManagerAlgorithm:</emphasis> Keymanagers's algorithm, by default is SunX509
            </listitem>
            <listitem>
               <emphasis>KeyManagerPassword:</emphasis> Keymanagers's password
            </listitem>
            <listitem>
               <emphasis>SSLProtocol:</emphasis> SSL's protocol, by default is SSLv3
            </listitem>
         </itemizedlist>
      </section>
   </section>
   <section>
      <title>Usage</title>
      <para>
			To use the HttpAdaptor you should instantatiate the MBean and register it to the right server. Later you can set up the
			desired parameters and invoke start to init the operation. Remember to add a JAXP-compliant parser such as xerces to the
			CLASSPATH. If you want to use the XSLTAdaptor you should also add xalan.jar to the CLASSPATH. If you want to use SSL add
			the JSSE jar files
      </para>
      <example>
         <title>Instantiating the HttpAdaptor</title>
         <programlisting><![CDATA[
import mx4j.tools.adaptor.http.HttpAdaptor;

MBeanServer server = ...;
HttpAdaptor adapter = new HttpAdaptor();
ObjectName name = new ObjectName("Server:name=HttpAdaptor");
server.registerMBean(adapter, name);
adapter.setPort(XXX);
adapter.setHost("XXX");
adapter.start();

or...
server.createMBean("mx4j.tools.adaptor.http.HttpAdaptor", name, null);
server.setAttribute(name, new Attribute("Port", new Integer(XXX)));
server.setAttribute(name, new Attribute("Host", "XXX"));
server.invoke(name, "start", null, null);
         ]]></programlisting>
      </example>
      <para>
		If you wan to use a non-default Processor. You may instantiate and install it as follow
         <example>
            <title>Installing a non-default Processor</title>
            <programlisting><![CDATA[
MBeanServer server = ...;
ObjectName name = new ObjectName("Server:name=HttpAdaptor");
ObjectName processorName = new ObjectName("Server:name=XSLTProcessor");
server.createMBean("mx4j.tools.adaptor.http.HttpAdaptor", name, null);
server.createMBean("mx4j.tools.adaptor.http.XSLTProcessor", processorName, null);
server.setAttribute(name, new Attribute("ProcessorName", processorName));
         ]]></programlisting>
         </example>
      </para>
   </section>
   <section>
      <title>Available requests</title>
      <para>
			The HttpAdaptor works by interpreting requests and executing some action. The Adaptor has a list of available requests
			and they produce an XML ouput tree (Or an exception...). New request handlers can be added if necessary, creating
			a
         <classname>mx4j.tools.adaptor.http.HttpCommandProcessor</classname> implementation, and add it to the HttpAdaptor
			using the addCommandProcessor and removeCommandProcessor.
      </para>
      <para>
			The following is a list of the currently available requests, and the results and parameters required.
         <itemizedlist mark="opencircle">
            <listitem>
               <para>
                  <emphasis>http://host:port/serverbydomain</emphasis> Returns a list of the MBeans available in the server grouped by domain. The result tree is as follows:
                  <programlisting><![CDATA[
<Server>
	<Domain name="Http">
		<MBean classname="mx4j.tools.adaptor.http.HttpAdaptor" description="HttpAdaptor MBean" objectname="Http:name=HttpAdaptor"></MBean>
		<MBean classname="mx4j.tools.adaptor.http.XSLTProcessor" description="XSLT Processor" objectname="Http:name=XSLTProcessor"></MBean>
	</Domain>
	<Domain name="JMImplementation">
		<MBean classname="javax.management.MBeanServerDelegate" description="" objectname="JMImplementation:type=MBeanServerDelegate"></MBean>
	</Domain><Domain name="Test">
</Server>
                     ]]></programlisting>
                  <para>The request can accept the following parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>instanceof:</emphasis> Filters the MBeans whether they
								are instance of the class. For instance
                        <emphasis>
									http://host:port/serverbydomain?instanceof=javax.management.timer.Timer
                        </emphasis> will produce a list of all timers
                     </listitem>
                     <listitem>
                        <emphasis>querynames:</emphasis> Filters the MBeans by objectname for instance
                        <emphasis>
									http://host:port/serverbydomain?querynames=*:*
                        </emphasis> will produce a list of all mbeans whether
                        <emphasis>http://host:port/serverbydomain?querynames=Test:*</emphasis> will only contain those MBeans in the Test domain
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/server</emphasis> Returns a list of the MBeans available in the server. The result tree is as follows:
                  <programlisting><![CDATA[
<Server>
	<MBean objectname="Http:name=HttpAdaptor"></MBean>
	<MBean objectname="Http:name=XSLTProcessor"></MBean>
	<MBean objectname="JMImplementation:type=MBeanServerDelegate"></MBean>
</Server>
                     ]]></programlisting>
                  <para>The request can accept the following parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>instanceof:</emphasis> Filters the MBeans whether they
						are instance of the class. For instance
                        <emphasis>
							http://host:port/serverbydomain?instanceof=javax.management.timer.Timer
                        </emphasis> will produce a list of all timers
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/mbean?objectname=XXX</emphasis> Returns the description of the referred MBean.
						It requires that the target objectname is passed on the request. The result tree for the request is as follows
						http://host:port/mbean?objectname=Test:name=test1
                  <programlisting><![CDATA[
<MBean classname="test.mx4j.tools.adaptor.http.HttpAdaptorXMLTest$TestClass" description="" objectname="Test:name=test1">
	<Attribute availability="RO" description="" isnull="false" name="Double" type="java.lang.Double" value="0.0"/>
	<Attribute availability="RW" description="" isnull="false" name="Str" type="java.lang.String" value="t1"/>
	<Attribute availability="RO" description="" isnull="false" name="True" type="boolean"  value="true"/>
	<Constructor description="" name="test.mx4j.tools.adaptor.http.HttpAdaptorXMLTest$TestClass">
		<Parameter description="" id="0" name="" type="java.lang.String"/>
	</Constructor>
	<Operation description="" impact="unknown" name="aMethod" return="java.lang.Boolean">
		<Parameter description="" id="0" name="" type="java.lang.String">
		</Parameter>
	</Operation>
	<Operation description="" impact="unknown" name="anotherMethod" return="void">
		<Parameter description="" id="0" name="" type="java.lang.String"></Parameter>
		<Parameter description="" id="1" name="" type="int"></Parameter>
	</Operation>
	<Notification description="test" name="name">
		<Type name="test1"></Type>
		<Type name="test2"></Type>
		</Notification>
</MBean>
                     ]]>
                  </programlisting>
                  <para>The Attribute element may have an aggregation attribute for composite types array, collection and map</para>
                  <para>The request can accept the following extra parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>attributes:</emphasis> if set to false as
                        <emphasis>
							http://host:port/mbean?objectname=Test:name=test1&amp;attributes=false
                        </emphasis> no attributes are included in the result tree
                     </listitem>
                     <listitem>
                        <emphasis>operations:</emphasis> if set to false as
                        <emphasis>
							http://host:port/mbean?objectname=Test:name=test1&amp;operations=false
                        </emphasis> no operations are included in the result tree
                     </listitem>
                     <listitem>
                        <emphasis>constructors:</emphasis> if set to false as
                        <emphasis>
							http://host:port/mbean?objectname=Test:name=test1&amp;constructors=false
                        </emphasis> no constructors are included in the result tree
                     </listitem>
                     <listitem>
                        <emphasis>notifications:</emphasis> if set to false as
                        <emphasis>
							http://host:port/mbean?objectname=Test:name=test1&amp;notifications=false
                        </emphasis> no notifications are included in the result tree
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/getattribute?objectname=XXX&amp;attribute=XXX&amp;format=ZZZ</emphasis>
						Gets the value of an attribute. This is an operation intended to get certain types
						of attributes in a usable format, in particular arrays. If format is omited or not understood
						the default value is returned like:
                  <programlisting><![CDATA[
<MBean objectname="Test:name=test1">
	<Attribute classname="java.lang.String" isnull="false" name="Str" value="t1"/>" +
</MBean>"
                     ]]></programlisting>
						However if format=array and the attribute is actually an array the result is like
                  <programlisting><![CDATA[
<MBean objectname="Test:name=test3">
	<Attribute classname="[Ljava.lang.String;" isnull="false" name="StrArray">
		<Array componentclass="java.lang.String" length="3">
			<Element element="a" isnull="false" index="0"/>
			<Element element="b" isnull="false" index="1"/>
			<Element element="c" isnull="false" index="2"/>
		</Array>
	</Attribute>
</MBean>
                     ]]></programlisting>
						If format=collection and the attribute is a collection the result is like
                  <programlisting><![CDATA[
<MBean objectname="Test:name=test3">
	<Attribute classname="java.util.List" isnull="false" name="List">
		<Collection length="3">
			<Element elementclass="java.lang.String" element="a" index="0"/>
			<Element elementclass="java.lang.String" element="b" index="1"/>
			<Element elementclass="java.lang.String" element="c" index="2"/>
		</Collection>
	</Attribute>
</MBean>
                     ]]></programlisting>
						If format=map and the attribute is a map the result is like
                  <programlisting><![CDATA[
<MBean objectname="Test:name=test3">
	<Attribute classname="java.util.Map" isnull="false" name="Map">
		<Map length="3">
			<Element elementclass="java.lang.String" element="a" keyclass="java.lang.Integer" key="0"/>
			<Element elementclass="java.lang.String" element="b" keyclass="java.lang.Integer" key="1"/>
			<Element elementclass="java.lang.String" element="c" keyclass="java.lang.Integer" key="2"/>
		</Map>
	</Attribute>
</MBean>
                     ]]></programlisting>
                  <para>The request requires the following parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>objectname:</emphasis> Target objectname
                     </listitem>
                     <listitem>
                        <emphasis>attribute:</emphasis> Attribute's name
                     </listitem>
                     <listitem>
                        <emphasis>format:</emphasis> Result format. The currently supported types are array, collection and map
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/setattribute?objectname=XXX&amp;attribute=XXX&amp;value=XXX</emphasis> Sets the value of one attribute. This is an operation request
						rather that a data request. All operation requests are returned as a MBeanOperation tree, which looks as follow
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation objectname="Test:name=test1" operation="setattribute" result="success"/>
</MBeanOperation>
                     ]]></programlisting>
						or if there was an error it looks like
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation errorMsg="Attribute Number not found" objectname="Test:name=test1" operation="setattribute" result="error"/>
</MBeanOperation>
                     ]]></programlisting>
                  <para>The request requires the following parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>objectname:</emphasis> Target objectname
                     </listitem>
                     <listitem>
                        <emphasis>attribute:</emphasis> Attribute's name
                     </listitem>
                     <listitem>
                        <emphasis>value:</emphasis> Attribute's value
                     </listitem>
                  </itemizedlist>
                  <para>
                     <strong>setattribute is deprecated in 1.1.1 and setattributes should be used instead </strong>
                  </para>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/setattributes?objectname=XXX&amp;value_YYY=XXX&amp;value_YYY2=XXX2&amp;[set_XXX=Set | setall]</emphasis> Sets the value of many attributes.
						This is an operation request. The result will be a list of the attributes set.
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation objectname="Test:name=test1" operation="setattribute">
		<Attribute attribute="YYY" value="XXX" result="success"/>
		<Attribute attribute="YYY2" value="XXX2" result="success"/>
	</Operation>
</MBeanOperation>
                     ]]></programlisting>
						or if there was an error it looks like
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation objectname="Test:name=test1" operation="setattribute">
		<Attribute attribute="YYY" errorMsg="Some error message" result="error"/>
		<Attribute attribute="YYY2" value="XXX2" result="success"/>
	</Operation>
</MBeanOperation>
                     ]]></programlisting>
                  <para>The request requires the following parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>objectname:</emphasis> Target objectname
                     </listitem>
                     <listitem>
                        <emphasis>value_XXX:</emphasis> Value for the atribute name XXX. The request can pass many parameters, but it depends on
							the set_XXX parameters which values will be set
                     </listitem>
                     <listitem>
                        <emphasis>[set_XXX=Set | setall]:</emphasis> Indicates which value is used. If setall is present it will set all attributes passed.
							If only set_XXX is passed that will be set.
                     </listitem>
                  </itemizedlist>
                  <para>
                     <strong>Notice that in case of one attribute failing the other will be set anyway</strong>
                  </para>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/invoke?objectname=XXX&amp;operation=XXX&amp;type0=XXX&amp;value0=XXX...</emphasis>
						Invokes an operation on the target MBean
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation objectname="Test:name=test1" operation="invoke" result="success" return="true"/>
</MBeanOperation>
                     ]]></programlisting>
                  <para>The following parameters are required:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>objectname:</emphasis> Target objectname
                     </listitem>
                     <listitem>
                        <emphasis>operation:</emphasis> Name of the operation
                     </listitem>
                  </itemizedlist>
                  <para>If you want to invoke an operation which takes parameters, add the following parameters:</para>
                  <itemizedlist>
                     <listitem>
                        <emphasis>typeX:</emphasis> Type of the parameter number X. They are enumerated starting from 0
                     </listitem>
                     <listitem>
                        <emphasis>valueX:</emphasis> Value of the parameter number X. They are enumerated starting from 0
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/delete?objectname=XXX</emphasis>
						Removed the target MBean
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation objectname="Test:name=test1" operation="delete" result="success"/>
</MBeanOperation>
                     ]]></programlisting>
                  <para>The following parameter is required:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>objectname:</emphasis> Target objectname
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/create?class=XXX&amp;objectname=XXX&amp;type0=XXX&amp;value0=XXX...</emphasis>
						Creates a target MBean invoking the corresponding constructor
                  <programlisting><![CDATA[
<MBeanOperation>
	<Operation objectname="Test:name=test1" operation="invoke" result="success" return="true"/>
</MBeanOperation>
                     ]]></programlisting>
                  <para>The following parameters are required:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>classname:</emphasis> Target objectname
                     </listitem>
                     <listitem>
                        <emphasis>objectname:</emphasis> Target objectname
                     </listitem>
                  </itemizedlist>
                  <para>If you want to invoke create using a constructor which takes parameters, add the following parameters:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>typeX:</emphasis> Type of the parameter number X. They are enumerated starting from 0
                     </listitem>
                     <listitem>
                        <emphasis>valueX:</emphasis> Value of the parameter number X. They are enumerated starting from 0
                     </listitem>
                  </itemizedlist>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/constructors?classname=mx4j.tools.adaptor.http.HttpAdaptor</emphasis>
						Queries the MBean server of the available constructors for a class name resulting on
                  <programlisting><![CDATA[
<Class classname="mx4j.tools.adaptor.http.HttpAdaptor">
	<Constructor name="mx4j.tools.adaptor.http.HttpAdaptor">
		<Parameters ...>
		</Parameters>
	</Constructor>
</Class>
                     ]]></programlisting>
                  <para>The following parameter is required:</para>
                  <itemizedlist mark="opencircle">
                     <listitem>
                        <emphasis>classname:</emphasis> Target classname
                     </listitem>
                  </itemizedlist>
                  <para>In case the class is not found an exception will be sent as</para>
                  <programlisting><![CDATA[
	<Exception classname="mx4j.tools.adaptor.http.HttpAdaptor" errorMsg="class XXX not found"/>
                                       ]]></programlisting>
               </para>
            </listitem>
            <listitem>
               <para>
                  <emphasis>http://host:port/empty</emphasis>
						The empty request returns an empty xmltree. Is basically used to create 'static' requests
						made on pure xsl. The result tree is as
                  <programlisting><![CDATA[
<empty/>
                     ]]>
                  </programlisting>
               </para>
            </listitem>

         </itemizedlist>
      </para>
   </section>
</section>
